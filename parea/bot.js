const { Client, LocalAuth, MessageMedia, Buttons } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const { isUserRegistered, validateUser, getEstablishmentNameByPhone } = require('./db/userQueries');
const path = require('path');
const userStates = {};  // Objeto para armazenar o estado de login de cada usu√°rio


// Fun√ß√£o para verificar se o usu√°rio est√° logado
function isUserLoggedIn(phoneNumber) {
    return userStates[phoneNumber] && userStates[phoneNumber].isLoggedIn;
}


const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: { headless: true }
});

client.on('qr', (qr) => {
    console.log('QR Code recebido:');
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('Cliente est√° pronto!');
});


// Fun√ß√£o para enviar bot√µes
function sendButtonMessage(chatId) {
    const buttons = [
        { id: 'customId', body: 'Entrar/Login üõ†Ô∏è' },
        { body: 'Veja nossa imagem üì∑' },
        { body: 'Informa√ß√µes sobre a empresa ‚ÑπÔ∏è' },
        { body: 'Nome da CEO e empresa desenvolvedora üë©‚Äçüíª' },
        { body: 'Encerrar conversa ‚ùå' },
    ];

    // Cria o objeto Buttons com o texto e os bot√µes formatados
    const formattedButtons = new Buttons(
        'Escolha uma das op√ß√µes abaixo:', 
        buttons, 
        'Menu Inicial', 
        'Parea Bot ü§ñ'
    );

    // Envia a mensagem com os bot√µes
    client.sendMessage(chatId, formattedButtons);
}


// Fun√ß√£o para o menu ap√≥s login (logado)
function sendLoggedButtons(chatId) {
    const message = `*Parea Bot* ü§ñ:

Escolha uma op√ß√£o:

1Ô∏è‚É£ Cadastrar Produto üõí
2Ô∏è‚É£ Ver Produtos üì¶
3Ô∏è‚É£ Ver Validades üìÖ
4Ô∏è‚É£ Voltar para Home ‚¨ÖÔ∏è`;

    client.sendMessage(chatId, message);
}


client.on('message', async (message) => {
    const phoneNumber = message.from;  // N√∫mero de telefone do remetente
    const messageBody = message.body.trim();  // Mensagem enviada pelo usu√°rio
    
    if (messageBody.toLowerCase() === 'ol√°') {
        // Responde com Menu
        sendButtonMessage(message.from);  // Exibe o menu para o usu√°rio
        return;
    }

    try {
        if (!isUserLoggedIn(phoneNumber)) {
            if (messageBody === 'entrar/login') {
                // Realizar a valida√ß√£o de login...
                // L√≥gica de login
            } else if (messageBody === 'veja nossa imagem') {
                // Enviar imagem...
            } else if (messageBody === 'informa√ß√µes sobre a empresa') {
                // Informa√ß√µes da empresa...
            } else if (messageBody === 'nome da ceo e empresa desenvolvedora') {
                // Nome da CEO e desenvolvedora...
            } else if (messageBody === 'encerrar conversa') {
                client.sendMessage(phoneNumber, 'Conversa encerrada. Envie *Ol√°* para iniciar novamente.');
            } else {
                client.sendMessage(phoneNumber, 'Op√ß√£o inv√°lida. Envie *Ol√°* para ver as op√ß√µes dispon√≠veis.');
            }
        } else {
            // Se o usu√°rio est√° logado, mostra o menu de op√ß√µes p√≥s-login
            switch (messageBody) {
                case '1': // Cadastrar Produto
                    client.sendMessage(phoneNumber, 'Por favor, informe os detalhes do produto.');
                    registerProduct(phoneNumber);
                    break;
                case '2': // Ver Produtos
                    client.sendMessage(phoneNumber, 'Buscando produtos...');
                    listProducts(phoneNumber);
                    break;
                case '3': // Hist√≥rico de Cadastro
                    client.sendMessage(phoneNumber, 'Por favor, informe a data de validade no formato (YYYY-MM-DD).');
                    client.once('message', (dateMessage) => {
                        const expiryDate = dateMessage.body.trim();
                        viewByExpiryDate(phoneNumber, expiryDate);
                    });
                    break;
                case '4': // Voltar para Home
                    sendSimulatedButtons(phoneNumber);  // Exibe o menu para o usu√°rio
                    break;
                default:
                    client.sendMessage(phoneNumber, 'Op√ß√£o inv√°lida. Envie "1", "2", "3" ou "4".');
            }
        }
    } catch (error) {
        console.error('Erro no bot:', error);
        client.sendMessage(phoneNumber, 'Erro no sistema. Tente novamente mais tarde.');
    }
});

client.initialize();
